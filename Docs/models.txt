-- 1. USERS & CLIENTS

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users of the system (you, future admins, etc.)
CREATE TABLE auth_user (
  id          UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  email       VARCHAR(255) NOT NULL UNIQUE,
  password    VARCHAR(128) NOT NULL,
  first_name  VARCHAR(100),
  last_name   VARCHAR(100),
  phone       VARCHAR(20),
  role        VARCHAR(20) NOT NULL CHECK(role IN ('developer','admin')) DEFAULT 'developer',
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  date_updated TIMESTAMPTZ
);

-- Your clients (external customers)
CREATE TABLE client (
  id            UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  name          VARCHAR(255) NOT NULL,
  email         VARCHAR(255) NOT NULL UNIQUE,
  phone         VARCHAR(20),
  industry      VARCHAR(100),
  domain        VARCHAR(100),
  account_balance NUMERIC(12,2) NOT NULL DEFAULT 0.00,
  date_created  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  date_updated  TIMESTAMPTZ
);


-- 2. SITE CONTENT: HERO & ABOUT

CREATE TABLE hero_section (
  id            SERIAL PRIMARY KEY,
  heading       VARCHAR(255) NOT NULL,
  subheading    VARCHAR(500),
  cta_text      VARCHAR(100),
  cta_link      TEXT,
  date_created  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE about_section (
  id            SERIAL PRIMARY KEY,
  title         VARCHAR(255) NOT NULL,
  description   TEXT NOT NULL,
  media_url     TEXT,
  socials_urls  JSONB,            -- e.g. [{"name":"twitter","url":"..."},â€¦]
  date_updated  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 3. PROJECTS

CREATE TYPE project_status AS ENUM ('ongoing','completed','maintenance');

CREATE TABLE project (
  id             UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  title          VARCHAR(255) NOT NULL,
  slug           VARCHAR(255) NOT NULL UNIQUE,
  category       VARCHAR(100),
  domain         VARCHAR(100),
  client_id      UUID    REFERENCES client(id) ON DELETE SET NULL,
  image_url      TEXT,
  description    TEXT    NOT NULL,
  content        TEXT,
  url            TEXT,
  repository_url TEXT,
  likes          INTEGER NOT NULL DEFAULT 0,
  featured       BOOLEAN NOT NULL DEFAULT FALSE,
  completion_date DATE,
  status         project_status NOT NULL DEFAULT 'ongoing',
  date_created   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  date_updated   TIMESTAMPTZ
);

-- gallery images for projects
CREATE TABLE project_gallery_image (
  id          SERIAL PRIMARY KEY,
  project_id  UUID    NOT NULL REFERENCES project(id) ON DELETE CASCADE,
  image_url   TEXT    NOT NULL
);

-- technologies (master list)
CREATE TABLE technology (
  id        SERIAL PRIMARY KEY,
  name      VARCHAR(100) NOT NULL UNIQUE,
  icon_url  TEXT
);

-- join table
CREATE TABLE project_technology (
  project_id    UUID NOT NULL REFERENCES project(id)  ON DELETE CASCADE,
  technology_id INT  NOT NULL REFERENCES technology(id) ON DELETE CASCADE,
  PRIMARY KEY (project_id, technology_id)
);

-- comments on projects
CREATE TABLE project_comment (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  project_id   UUID    NOT NULL REFERENCES project(id) ON DELETE CASCADE,
  name         VARCHAR(255) NOT NULL,
  email        VARCHAR(255),
  message      TEXT    NOT NULL,
  approved     BOOLEAN NOT NULL DEFAULT FALSE,
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 4. BLOGS & TAGS

CREATE TABLE blog_post (
  id            UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  title         VARCHAR(255) NOT NULL,
  slug          VARCHAR(255) NOT NULL UNIQUE,
  date_published DATE    NOT NULL,
  category      VARCHAR(100),
  author_id     UUID    NOT NULL REFERENCES auth_user(id) ON DELETE SET NULL,
  image_url     TEXT,
  excerpt       TEXT    NOT NULL,
  content       TEXT    NOT NULL,
  status        VARCHAR(20) NOT NULL CHECK(status IN ('draft','published','archived')),
  view_count    INTEGER NOT NULL DEFAULT 0,
  featured      BOOLEAN NOT NULL DEFAULT FALSE,
  date_created  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  date_updated  TIMESTAMPTZ
);

CREATE TABLE tag (
  id            SERIAL PRIMARY KEY,
  name          VARCHAR(50) NOT NULL UNIQUE,
  slug          VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE blogpost_tag (
  blogpost_id UUID NOT NULL REFERENCES blog_post(id) ON DELETE CASCADE,
  tag_id       INT NOT NULL REFERENCES tag(id)        ON DELETE CASCADE,
  PRIMARY KEY (blogpost_id, tag_id)
);

CREATE TABLE blog_comment (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  blogpost_id  UUID    NOT NULL REFERENCES blog_post(id) ON DELETE CASCADE,
  name         VARCHAR(255) NOT NULL,
  email        VARCHAR(255),
  message      TEXT    NOT NULL,
  approved     BOOLEAN NOT NULL DEFAULT FALSE,
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 5. SERVICES, TIERS & FEATURES

CREATE TYPE pricing_model AS ENUM ('fixed','tiered','custom','hourly','per-page');

CREATE TABLE service (
  id             UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  name           VARCHAR(255) NOT NULL,
  slug           VARCHAR(255) NOT NULL UNIQUE,
  category       VARCHAR(100) NOT NULL,
  subcategory    VARCHAR(100),
  description    TEXT    NOT NULL,
  short_description TEXT,
  img_url        TEXT,
  banner_url     TEXT,
  icon_url       TEXT,
  pricing_model  pricing_model NOT NULL,
  starting_at    NUMERIC(12,2),
  currency       VARCHAR(10),
  timeline       VARCHAR(100),
  featured       BOOLEAN NOT NULL DEFAULT FALSE,
  active         BOOLEAN NOT NULL DEFAULT TRUE,
  date_created   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  date_updated   TIMESTAMPTZ
);

CREATE TABLE service_pricing_tier (
  id               UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  service_id       UUID    NOT NULL REFERENCES service(id) ON DELETE CASCADE,
  name             VARCHAR(100) NOT NULL,
  price            NUMERIC(12,2) NOT NULL,
  currency         VARCHAR(10)    NOT NULL,
  unit             VARCHAR(50)    NOT NULL,
  estimated_delivery VARCHAR(50),
  recommended      BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE service_feature (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  title        VARCHAR(255) NOT NULL,
  description  TEXT,
  included     BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE pricingtier_feature (
  pricing_tier_id UUID NOT NULL REFERENCES service_pricing_tier(id) ON DELETE CASCADE,
  feature_id      UUID NOT NULL REFERENCES service_feature(id)         ON DELETE CASCADE,
  PRIMARY KEY (pricing_tier_id, feature_id)
);

CREATE TABLE service_faq (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  service_id   UUID    NOT NULL REFERENCES service(id) ON DELETE CASCADE,
  question     TEXT    NOT NULL,
  answer       TEXT    NOT NULL
);

CREATE TABLE service_process_step (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  service_id   UUID    NOT NULL REFERENCES service(id) ON DELETE CASCADE,
  step_order   INTEGER NOT NULL,
  title        VARCHAR(255) NOT NULL,
  description  TEXT
);

CREATE TABLE service_deliverable (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  service_id   UUID    NOT NULL REFERENCES service(id) ON DELETE CASCADE,
  description  TEXT    NOT NULL
);

CREATE TABLE service_tool (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  service_id   UUID    NOT NULL REFERENCES service(id) ON DELETE CASCADE,
  tool_name    VARCHAR(100) NOT NULL
);

CREATE TABLE service_popular_usecase (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  service_id   UUID    NOT NULL REFERENCES service(id) ON DELETE CASCADE,
  use_case     VARCHAR(255) NOT NULL
);


-- 6. ORDERS, TESTIMONIALS, NOTIFICATIONS, CONTACTS

CREATE TABLE "order" (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  client_id    UUID    NOT NULL REFERENCES client(id) ON DELETE CASCADE,
  service_id   UUID    NOT NULL REFERENCES service(id) ON DELETE SET NULL,
  pricing_tier_id UUID REFERENCES service_pricing_tier(id),
  total_amount NUMERIC(12,2) NOT NULL,
  currency     VARCHAR(10) NOT NULL,
  status       VARCHAR(50) NOT NULL,
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  date_updated TIMESTAMPTZ
);

CREATE TABLE testimonial (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  client_id    UUID    NOT NULL REFERENCES client(id) ON DELETE CASCADE,
  content      TEXT    NOT NULL,
  rating       INTEGER CHECK (rating BETWEEN 1 AND 5),
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE notification (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id      UUID    NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
  type         VARCHAR(20) NOT NULL CHECK(type IN ('order','contact','system')),
  title        VARCHAR(255) NOT NULL,
  subject      VARCHAR(255),
  message      TEXT    NOT NULL,
  is_read      BOOLEAN NOT NULL DEFAULT FALSE,
  resource_id  UUID,
  resource_type VARCHAR(50),
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE contact_message (
  id           UUID    PRIMARY KEY DEFAULT uuid_generate_v4(),
  name         VARCHAR(255) NOT NULL,
  email        VARCHAR(255) NOT NULL,
  subject      VARCHAR(255),
  message      TEXT    NOT NULL,
  is_read      BOOLEAN NOT NULL DEFAULT FALSE,
  date_created TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
